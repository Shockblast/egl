/*
Copyright (C) 1997-2001 Id Software, Inc.

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
*/

// snd_loc.h -- private sound functions

#include "../client/cl_local.h"
#include <al/al.h>
#include <al/alut.h>
#include <al/alc.h>
#include <al/altypes.h>

// !!! if this is changed, the asm code must change !!!
typedef struct
{
	int			left;
	int			right;
} portable_samplepair_t;

typedef struct
{
	int				length;
	int				loopStart;
	int				speed;			// not needed, because converted on load?
	int				width;
	int				stereo;

	ALint			bufferNum;		//r1: OpenAL Buffer associated with this sound

	byte			data[1];		// variable sized
} sfxCache_t;

typedef struct sfx_s
{
	char			name[MAX_QPATH];
	unsigned		sRegistrationFrame;		// 0 = free
	sfxCache_t		*cache;
	char			*trueName;
} sfx_t;

// a playSound_t will be generated by each call to Snd_StartSound, when the mixer
// reaches playsound->begin, the playsound will be assigned to a channel
typedef struct playsound_s
{
	struct playsound_s	*prev, *next;
	sfx_t				*sfx;
	float				volume;
	float				attenuation;
	int					entNum;
	int					entChannel;
	qBool				fixedOrigin;	// use origin field instead of entnum's origin
	vec3_t				origin;
	unsigned			begin;			// begin on this sample
} playSound_t;

typedef struct
{
	int				channels;
	int				samples;				// mono samples in buffer
	int				submissionChunk;		// don't mix less than this #
	int				samplePos;				// in mono samples
	int				sampleBits;
	int				speed;
	byte			*buffer;
} dma_t;

// !!! if this is changed, the asm code must change !!!
typedef struct
{
	sfx_t			*sfx;			// sfx number
	int				leftVol;		// 0-255 volume
	int				rightVol;		// 0-255 volume
	int				end;			// end time in global paintsamples
	int				pos;			// sample position in sfx
	int				looping;		// where to loop, -1 = no looping OBSOLETE?
	int				entNum;			// to allow overriding a specific sound
	int				entChannel;		//
	vec3_t			origin;			// only use if fixed_origin is set
	vec_t			distMult;		// distance multiplier (attenuation/clipK)
	int				masterVol;		// 0-255 master volume
	qBool			fixedOrigin;	// use origin instead of fetching entnum's origin
	qBool			autoSound;		// from an entity->sound, cleared each frame
} channel_t;

typedef struct
{
	int				rate;
	int				width;
	int				channels;
	int				loopStart;
	int				samples;
	int				dataOfs;		// chunk starts this many bytes from file start
} wavInfo_t;

/*
====================================================================

	SYSTEM SPECIFIC FUNCTIONS

====================================================================
*/

qBool	SNDDMA_Init (void);			// initializes cycling through a DMA buffer and returns information on it
int		SNDDMA_GetDMAPos (void);	// gets the current DMA position
void	SNDDMA_BeginPainting (void);
void	SNDDMA_Submit (void);
void	SNDDMA_Shutdown (void);		// shutdown the DMA xfer.

//====================================================================

extern	dma_t	dma;
extern	int		snd_PaintedTime;

extern cvar_t	*s_volume;
extern cvar_t	*s_nosound;
extern cvar_t	*s_loadas8bit;
extern cvar_t	*s_khz;
extern cvar_t	*s_show;
extern cvar_t	*s_mixahead;
extern cvar_t	*s_testsound;
extern cvar_t	*s_primary;

//
// snd_dma.c
//

#define	MAX_CHANNELS	32
extern	channel_t				snd_Channels[MAX_CHANNELS];

extern	playSound_t				snd_PendingPlays;

#define	MAX_RAW_SAMPLES	8192
extern	int						snd_RawEnd;
extern	portable_samplepair_t	snd_RawSamples[MAX_RAW_SAMPLES];

void Snd_IssuePlaysound (playSound_t *ps);

// picks a channel based on priorities, empty slots, number of channels
channel_t *Snd_PickChannel (int entNum, int entChannel);

void Snd_Spatialize (channel_t *ch);	// spatializes a channel

//
// snd_mem.c
//

wavInfo_t Snd_GetWavinfo (char *name, byte *wav, int wavLength);

//
// snd_mix.c
//

void Snd_InitScaleTable (void);
sfxCache_t *Snd_LoadSound (sfx_t *s);
void Snd_PaintChannels (int endtime);

/*
====================================================================

	OPENAL

====================================================================
*/

#define	MAX_OPENAL_BUFFERS 1024
#define MAX_OPENAL_SOURCES 128

typedef struct OpenALBuffer_s
{
	ALuint		buffer;
	ALboolean	inUse;
} OpenALBuffer_t;

typedef struct OpenALIndex_s
{
	qBool		inUse;
	qBool		fixedOrigin;
	vec3_t		origin;
	int			entNum;
	int			sourceIndex;
} OpenALIndex_t;

extern qBool			snd_ALActive;
extern void				*snd_ALDevice;

extern unsigned int		snd_MaxALSources;
extern unsigned int		snd_MaxALBuffers;

extern ALuint			snd_ALSources[MAX_OPENAL_SOURCES];
extern OpenALBuffer_t	snd_ALBuffers[MAX_OPENAL_BUFFERS];
extern OpenALIndex_t	snd_ALIndexes[MAX_SOUNDS];

qBool OpenAL_Init (void);
void OpenAL_Shutdown (void);

void OpenAL_DestroyBuffers (void);
ALint OpenAL_GetFreeBuffer (void);
ALint OpenAL_GetFreeSource (void);

void OpenAL_FreeALIndexes (int index);
int OpenAL_GetFreeALIndex (void);

void OpenAL_CheckForError (void);
